openapi: 3.0.3
info:
  title: Eagle Bank API
  version: 1.0.0
  description: REST API for Eagle Bank, handling user authentication, account management, and transactions.

servers:
  - url: http://localhost:8080

paths:
  /v1/auth/login:
    post:
      summary: Login user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/users/{userId}:
    get:
      summary: Get user details by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/accounts:
    post:
      summary: Create a bank account
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountRequest'
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /v1/accounts/{accountId}:
    get:
      summary: Get bank account details
      security:
        - bearerAuth: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/accounts/{accountId}/transactions:
    post:
      summary: Create a transaction for an account (deposit or withdrawal)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        '200':
          description: Transaction completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /v1/accounts/{accountId}/transactions/{transactionId}:
    get:
      summary: Get transaction details by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

  schemas:
    UserLoginRequest:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    UserLoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserRequest:
      type: object
      required: [ fullName, email, password ]
      properties:
        fullName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        email:
          type: string
          format: email

    BankAccountRequest:
      type: object
      required: [ accountType, balance ]
      properties:
        accountType:
          type: string
          example: savings
        balance:
          type: number
          format: double
          example: 500.00

    BankAccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        accountType:
          type: string
        balance:
          type: number
          format: double

    TransactionRequest:
      type: object
      required: [ amount, type ]
      properties:
        amount:
          type: number
          format: double
        type:
          $ref: '#/components/schemas/TransactionType'

    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          type: number
          format: double
        updatedBalance:
          type: number
          format: double

    TransactionType:
      type: string
      enum:
        - DEPOSIT
        - WITHDRAW
